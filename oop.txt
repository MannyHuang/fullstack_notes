/**********************************************************
Importance of Object Oriented Language
**********************************************************/
1.Choice of Construct
	1.Make a class that doesn’t extend anything 
		1.when the new class doesn’t pass the IS-A test for any other type.
	2.Make a subclass (extend a class) 
		1.only when you need to make a more specific version of a class and need to override or add new behaviours.
	3.Make an abstract class 
		1.when you want to define a template for a group of subclasses
		2.and you have at least some implementation code that all subclasses could use
		3.when you want to guarantee that nobody can make objects of that type.
	4.Make an Interface when
		1.when you want to define a role that other classes can play, regardless of where those classes are in the inheritance tree.
	

1.Key Characteristics:
	1.Encapsulation: storing data and functions in a single class
		1.data not accessible by the outside, only the functions inside the class
	2.Inheritance:
		1.objects acquire properties of objects of other classes
		2.deriving new classes from existing classes (adding new features without modifying existing class)
	3.Polymorphism:
		1.behaviour depends on data type used (used in inheritance)
		
	

2.Fundamentals:
	1.Objects:basic unit of interaction at runtime 
	2.Class: collection of objects with similar type


3.Consequences
	1.modular structure
		1.good for creating abstract data types
			1.clear interface
			2.hide details

	2.Objects can be created from existing objects
		1.good for modifying existing code
		2.good framework for code library
	

